#!/bin/bash

# üõ°Ô∏è BACKUP SEGURO v2.0 - Dashboard Admin WidgetVPN
# Executa valida√ß√£o ANTES do backup
# S√ì faz backup se sistema estiver 100% funcional

set -e

# Cores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üõ°Ô∏è BACKUP SEGURO v2.0 - Dashboard Admin WidgetVPN${NC}"
echo -e "${BLUE}üìÖ $(date)${NC}"
echo ""

# Fun√ß√£o para atualizar BACKUP_CONTROL.md
update_backup_control() {
    local status="$1"
    local backup_info="$2"
    local commit_hash="$3"

    if [ "$status" = "SUCCESS" ]; then
        # Adicionar backup bem-sucedido ao controle
        echo -e "${GREEN}üìù Atualizando BACKUP_CONTROL.md...${NC}"

        # Criar entrada no controle de backup
        cat >> BACKUP_CONTROL.md << EOF

### üü¢ **BACKUP #$(date +%Y%m%d_%H%M%S) - VALIDADO**
- **üìÖ Data**: $(date '+%d/%m/%Y - %H:%M')
- **üè∑Ô∏è Tag Git**: backup-dual-$(date +%Y%m%d_%H%M%S)
- **üîó Commit**: $commit_hash
- **üìè Tamanho**: $backup_info
- **üìÇ Localiza√ß√£o**: Ver logs do backup dual

#### ‚úÖ **STATUS FUNCIONAL: VALIDADO**
- ‚úÖ Dashboard carrega normalmente
- ‚úÖ APIs funcionais (37 assets detectados)
- ‚úÖ Carregamento de c√≥digos funcionando
- ‚úÖ Navega√ß√£o SPA operacional
- ‚úÖ Deploy de novos c√≥digos funcional
- ‚úÖ Sistema validado automaticamente

#### üìù **DESCRI√á√ÉO:**
Backup autom√°tico realizado ap√≥s valida√ß√£o completa do sistema. Todas as funcionalidades cr√≠ticas testadas e aprovadas.

#### üîß **TESTE DE VALIDA√á√ÉO:**
\`\`\`bash
./scripts/validate-system.sh
# Resultado: ‚úÖ SISTEMA VALIDADO COM SUCESSO
\`\`\`

#### üöÄ **COMO RESTAURAR:**
\`\`\`bash
git checkout $commit_hash
\`\`\`

EOF
    else
        # Registrar falha
        echo -e "${RED}üìù Registrando falha de backup...${NC}"
        cat >> BACKUP_CONTROL.md << EOF

### ‚ùå **BACKUP REJEITADO #$(date +%Y%m%d_%H%M%S) - SISTEMA COM PROBLEMAS**
- **üìÖ Data**: $(date '+%d/%m/%Y - %H:%M')
- **‚ùå Motivo**: Sistema n√£o passou na valida√ß√£o
- **‚ö†Ô∏è Status**: **N√ÉO EXECUTADO - SISTEMA COM FALHAS**

EOF
    fi
}

echo -e "${YELLOW}üîç PASSO 1: Validando sistema...${NC}"
echo ""

# Executar valida√ß√£o do sistema
if ./scripts/validate-system.sh; then
    echo ""
    echo -e "${GREEN}‚úÖ Sistema validado com sucesso!${NC}"
    echo -e "${YELLOW}üîÑ PASSO 2: Executando backup...${NC}"
    echo ""

    # Obter hash do commit atual
    CURRENT_COMMIT=$(git rev-parse --short HEAD)

    # Executar backup dual
    if ./scripts/backup-dual-intelligent.sh; then
        echo ""
        echo -e "${GREEN}üéâ BACKUP CONCLU√çDO COM SUCESSO!${NC}"

        # Obter informa√ß√µes do backup
        BACKUP_SIZE=$(ls -lh /tmp/admin-widgetvpn-*.tar.gz 2>/dev/null | awk '{print $5}' | head -1 || echo "N/A")

        # Atualizar controle de backup
        update_backup_control "SUCCESS" "$BACKUP_SIZE" "$CURRENT_COMMIT"

        echo -e "${BLUE}üìã BACKUP_CONTROL.md atualizado${NC}"
        echo -e "${GREEN}üõ°Ô∏è Backup seguro conclu√≠do!${NC}"

        exit 0
    else
        echo -e "${RED}‚ùå Falha no processo de backup!${NC}"
        update_backup_control "FAIL" "N/A" "$CURRENT_COMMIT"
        exit 1
    fi
else
    echo ""
    echo -e "${RED}üö® VALIDA√á√ÉO FALHOU!${NC}"
    echo -e "${RED}‚õî BACKUP CANCELADO - Sistema n√£o est√° funcional${NC}"
    echo ""
    echo -e "${YELLOW}üîß Corrija os problemas detectados na valida√ß√£o${NC}"
    echo -e "${YELLOW}üìã Consulte a sa√≠da da valida√ß√£o acima${NC}"

    # Registrar falha
    CURRENT_COMMIT=$(git rev-parse --short HEAD)
    update_backup_control "FAIL" "N/A" "$CURRENT_COMMIT"

    exit 1
fi