(function() {
  'use strict';
  
  const container = document.getElementById('descricao-rhid');
  if (!container) {
    console.log('‚ö†Ô∏è Cont√™iner #descricao-rhid n√£o encontrado. O script n√£o ser√° executado.');
    return;
  }

  // Prevenir inicializa√ß√£o dupla
  if (container.getAttribute('data-initialized')) return;
  container.setAttribute('data-initialized', 'true');

  let allReviews = [];
  let visibleReviews = 5;
  let showingAll = false;

  function initSystem() {
    console.log('üöÄ Iniciando sistema RHiD...');
    
    setTimeout(() => {
      initReviewSystem();
      initMLFilters();
      initSecureTabs();
      initFaqSystem();
      applyHighlights();
      console.log('‚úÖ Sistema RHiD carregado com sucesso');
    }, 100);
  }

  function initReviewSystem() {
    const reviewsContainer = container.querySelector('.rhid-reviews-grid');
    if (!reviewsContainer) {
      console.warn('Elemento .rhid-reviews-grid n√£o encontrado');
      return;
    }
    
    const reviewCards = reviewsContainer.querySelectorAll('.rhid-review-card');
    if (reviewCards.length === 0) return;
    
    allReviews = Array.from(reviewCards);
    for (let i = visibleReviews; i < allReviews.length; i++) {
      allReviews[i].style.display = 'none';
    }
    
    createShowAllButton();
    initHelpfulButtons();
  }

  function createShowAllButton() {
    const existingBtn = container.querySelector('.rhid-show-all-btn');
    if (existingBtn) existingBtn.remove();
    
    if (allReviews.length <= visibleReviews) return;
    
    const reviewsGrid = container.querySelector('.rhid-reviews-grid');
    if (!reviewsGrid) return;
    
    const showAllDiv = document.createElement('div');
    showAllDiv.className = 'rhid-show-all-btn';
    showAllDiv.style.textAlign = 'center';
    showAllDiv.style.margin = '25px 0';
    
    const showAllButton = document.createElement('button');
    showAllButton.className = 'rhid-show-all-button';
    showAllButton.type = 'button';
    showAllButton.style.cssText = 'background:linear-gradient(135deg,#f8f9fa,#ffffff);border:2px solid #b30400;border-radius:30px;padding:15px 35px;font-size:1.1rem;font-weight:600;color:#b30400;cursor:pointer;transition:all .3s ease;box-shadow:0 4px 15px rgba(0,0,0,.1)';
    showAllButton.innerHTML = `Ver todas as ${allReviews.length} opini√µes`;
    
    showAllButton.addEventListener('click', toggleAllReviews);
    showAllButton.addEventListener('mouseenter', function() {
      this.style.background = 'linear-gradient(135deg,#b30400,#d60500)';
      this.style.color = 'white';
      this.style.transform = 'translateY(-3px)';
      this.style.boxShadow = '0 12px 30px rgba(179,4,0,.25)';
    });
    
    showAllButton.addEventListener('mouseleave', function() {
      this.style.background = 'linear-gradient(135deg,#f8f9fa,#ffffff)';
      this.style.color = '#b30400';
      this.style.transform = 'translateY(0)';
      this.style.boxShadow = '0 4px 15px rgba(0,0,0,.1)';
    });
    
    showAllDiv.appendChild(showAllButton);
    reviewsGrid.parentNode.insertBefore(showAllDiv, reviewsGrid.nextSibling);
  }

  function toggleAllReviews() {
    const button = container.querySelector('.rhid-show-all-button');
    if (!button) return;
    
    showingAll = !showingAll;
    if (showingAll) {
      allReviews.forEach(review => review.style.display = 'block');
      button.innerHTML = 'Ver menos opini√µes';
    } else {
      for (let i = visibleReviews; i < allReviews.length; i++) {
        allReviews[i].style.display = 'none';
      }
      button.innerHTML = `Ver todas as ${allReviews.length} opini√µes`;
      
      const reviewsSection = container.querySelector('.rhid-reviews-section');
      if (reviewsSection) {
        reviewsSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
      }
    }
  }

  function initHelpfulButtons() {
    container.querySelectorAll('.rhid-review-helpful').forEach(btn => {
      btn.addEventListener('click', () => toggleHelpful(btn));
    });
  }

  function toggleHelpful(element) {
    const countSpan = element.querySelector('span') || element;
    const currentText = countSpan.textContent;
    const currentCount = parseInt(currentText.match(/\d+/) || 0);
    const isActive = element.classList.toggle('helpful-active');
    const newCount = isActive ? currentCount + 1 : Math.max(0, currentCount - 1);
    
    countSpan.textContent = currentText.replace(/\d+/, newCount);
    element.style.background = isActive ? '#28a745' : '';
    element.style.color = isActive ? 'white' : '#666';
    element.style.fontWeight = isActive ? '600' : 'normal';
    element.style.borderColor = isActive ? '#28a745' : 'transparent';
  }

  function initMLFilters() {
    const orderSelect = container.querySelector('#orderSelect');
    const qualificationSelect = container.querySelector('#qualificationSelect');
    
    if (orderSelect) orderSelect.addEventListener('change', (e) => applySort(e.target.value));
    if (qualificationSelect) qualificationSelect.addEventListener('change', (e) => applyStarFilter(e.target.value));
  }

  function applySort(sortType) {
    const reviewsContainer = container.querySelector('.rhid-reviews-grid');
    if (!reviewsContainer) return;
    
    let sortedReviews = [...allReviews];
    
    if (sortType !== 'recent') {
      sortedReviews.sort((a, b) => {
        if (sortType === 'helpful') {
          const aHelpful = parseInt(a.querySelector('.rhid-review-helpful')?.textContent.match(/\d+/)?.[0] || 0);
          const bHelpful = parseInt(b.querySelector('.rhid-review-helpful')?.textContent.match(/\d+/)?.[0] || 0);
          return bHelpful - aHelpful;
        }
        
        const aStars = a.querySelectorAll('.rhid-star:not(.empty)').length;
        const bStars = b.querySelectorAll('.rhid-star:not(.empty)').length;
        
        if (sortType === 'highest') return bStars - aStars;
        if (sortType === 'lowest') return aStars - bStars;
        return 0;
      });
    }
    
    reviewsContainer.innerHTML = '';
    sortedReviews.forEach(review => reviewsContainer.appendChild(review));
    allReviews = sortedReviews;
    applyVisibility();
  }

  function applyStarFilter(stars) {
    allReviews.forEach(review => {
      if (stars === 'all') {
        review.style.display = 'block';
      } else {
        const reviewStars = review.querySelectorAll('.rhid-star:not(.empty)').length;
        review.style.display = (reviewStars === parseInt(stars)) ? 'block' : 'none';
      }
    });
    
    applyVisibility();
  }

  function applyVisibility() {
    if (showingAll) return;
    
    const filteredReviews = allReviews.filter(review => review.style.display !== 'none');
    filteredReviews.forEach((review, index) => {
      review.style.display = (index < visibleReviews) ? 'block' : 'none';
    });
  }

  function initSecureTabs() {
    const tabsContainer = container.querySelector(".rhid-tabs");
    if (!tabsContainer || tabsContainer.querySelector('.rhid-tab-titles')) return;
    
    const tabItems = tabsContainer.querySelectorAll(".rhid-tab-item");
    if (tabItems.length === 0) return;
    
    const tabTitles = document.createElement('div');
    tabTitles.className = 'rhid-tab-titles';
    
    tabItems.forEach((item, index) => {
      const titleElement = item.querySelector(".rhid-tab-item__title");
      if (!titleElement) return;
      
      const tabButton = document.createElement('button');
      tabButton.type = 'button';
      tabButton.className = 'rhid-tab-button';
      tabButton.dataset.tab = index;
      tabButton.innerHTML = `<i class="rhid-icon">+</i>${titleElement.innerHTML}`;
      tabButton.addEventListener('click', () => activateTab(index));
      
      tabTitles.appendChild(tabButton);
      titleElement.style.display = "none";
    });
    
    tabsContainer.prepend(tabTitles);
    activateTab(0);
  }

  function activateTab(activeIndex) {
    const tabButtons = container.querySelectorAll('.rhid-tab-button');
    const tabItems = container.querySelectorAll('.rhid-tab-item');
    
    tabButtons.forEach((button, index) => {
      const icon = button.querySelector('.rhid-icon');
      const isActive = index === activeIndex;
      button.classList.toggle('rhid-active', isActive);
      if (icon) icon.innerHTML = isActive ? '‚àí' : '+';
    });
    
    tabItems.forEach((item, index) => {
      item.classList.toggle('rhid-active', index === activeIndex);
      if (index === activeIndex) {
        setTimeout(() => item.classList.add('in'), 10);
      } else {
        item.classList.remove('in');
      }
    });
  }

  function initFaqSystem() {
    const faqGrid = container.querySelector('.rhid-faq-grid');
    if (!faqGrid) return;
    
    faqGrid.addEventListener('click', function(e) {
      const questionHeader = e.target.closest('.rhid-faq-question');
      if (questionHeader) rhidToggleFaq(questionHeader);
    });
  }

  function rhidToggleFaq(element) {
    if (!element) return;
    const faqItem = element.closest('.rhid-faq-item');
    if (!faqItem) return;
    
    const isActive = faqItem.classList.contains('active');
    container.querySelectorAll('.rhid-faq-item.active').forEach(item => {
      if (item !== faqItem) item.classList.remove('active');
    });
    
    faqItem.classList.toggle('active', !isActive);
  }

  function applyHighlights() {
    container.querySelectorAll('.rhid-spec-highlight, .rhid-faq-highlight, .rhid-highlight').forEach(el => {
      el.style.setProperty('background', 'linear-gradient(135deg,#b30400,#d60500)', 'important');
      el.style.setProperty('color', 'white', 'important');
    });
    
    container.querySelectorAll('.rhid-cta-title, .rhid-cta-subtitle').forEach(el => {
      el.style.setProperty('color', '#ffffff', 'important');
    });
  }

  // Inicializa√ß√£o
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initSystem);
  } else {
    initSystem();
  }
})();